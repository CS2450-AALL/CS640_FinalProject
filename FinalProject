#EXTREME VERSION OF HANGMAN
#only a correct guess if it is placed at the correct index

.macro 	print_str (%str)  #prints the string of a given label
	li $v0, 4
	la $a0, %str
	syscall
.end_macro


.macro print_img
	#print the different body parts
	beq $t0, 0, bp1
	beq $t0, 1, bp2
	beq $t0, 2, bp3
	beq $t0, 3, bp4
	beq $t0, 4, bp5
	beq $t0, 5, bp6
	
	#1 default
bp1:	print_str(body1)
	j getChar
	
	#2 incorrect guesses
bp2:	print_str(body2)
	j getChar

	#3 incorrect guesses
bp3:	print_str(body3)
	j getChar

	#4 incorrect guesses
bp4:	print_str(body4)
	j getChar

	#5 incorrect guesses
bp5:	print_str(body5)
	j getChar

	#6 incorrect guesses
bp6:	print_str(body6)
	j getChar
		
.end_macro

.data
intro: .asciiz "\nWelcome to the EXTREME game of Hangman!\n===========================\nRules:\n     - How to play: Have 1 player input any 5 letter string, and have player 2 guess the word\n     - HOWEVER, player 2 has to guess the characters in order, \n       if not, a body part will be added whether or not that letter is in the word\n\n===========================\n"
menu: .asciiz "Menu:\n     1) Play Hangman\n     2) Exit"
userChoice: .asciiz "\nPlease input an option: "
prompt1: .asciiz "Player 1: Please input a 5 letter word: "
prompt2: .asciiz "\nPlayer 2: Enter a character: "
hangmanDisplay: .asciiz "Hangman display: "
lostPrompt: .asciiz "\n Sorry, you lost!"
winPrompt: .asciiz "\n Congrats, you won!"
underscore: .asciiz "_"
user_input:  .space  256   # Buffer to store user input
guessedChar: .space 1
exitPrompt: .asciiz "This program will now exit."
spacer: .asciiz "\n===========================\n"

same_msg: .asciiz "\nCharacters are the same."
diff_msg: .asciiz "\nCharacters are different."
body1: .asciiz "\n  +---+\n  |   |\n  O   |\n      |\n      |\n      |\n=========\n"
body2: .asciiz "\n  +---+\n  |   |\n  O   |\n  |   |\n      |\n      |\n=========\n"
body3: .asciiz "\n  +---+\n  |   |\n  O   |\n /|    |\n      |\n      |\n=========\n"
body4: .asciiz "\n  +---+\n  |   |\n  O   |\n /|\    |\n      |\n      |\n=========\n"
body5: .asciiz "\n  +---+\n  |   |\n  O   |\n /|\   |\n /     |\n      |\n=========\n"
body6: .asciiz "\n  +---+\n  |   |\n  O   |\n /|\    |\n / \  |\n      |\n=========\n"

.text
main:
    	print_str(intro)
    	
    	print_str(menu)
    	
    	print_str(userChoice)
    	
    	li $v0, 5
    	syscall
    	
    	beq $v0, 1, play
    	beq $v0, 2, exit
    	

play:    
	print_str(spacer)
	
	print_str(prompt1)
    	# Prompt player 1 for input
    	li $v0, 8            # System call for read_string
    	la $a0, user_input    # Buffer to store user input
    	li $a1, 256           # Maximum number of characters to read
    	syscall

	#load in address of string to $s1
	la $s1, user_input
	
    	# Loop counter for incorrect guesses
    	li $t0, 0
    	
    	# Loop counter for correct guesses
    	li $t3, 0

    	j getChar 

getChar:
    	print_str(prompt2)

    	# Read a character from the user
    	li $v0, 12              # syscall: read_char
    	syscall
    	move $s0, $v0             # Save the character in $s0
    	
    	j compareChars

compareChars: # Loop to compare player 2's char from the inputted string

    	lb   $t1, ($s1)   # Load the next character, character is in $t1
    	beq  $t1, $zero, getChar  # If it's the null terminator (end of the string), go to get another char from user

    	beq $t1, $s0, same
    	bne $t1, $s0, different

    	j compareChars
    		
same:
    	# Display message for same characters
    	print_str(same_msg)
    	
    	#move to next char of the string
    	addi $s1,$s1,1
    	
    	#if all letters are correctly guessed, exit
    	addi $t3, $t3, 1
    	beq $t3, 5, win
    	
    	print_img
    	
    	#j getChar #jump to get another char
win:
	print_str(winPrompt)
	j main
	
different:
    	# Display message for different characters
    	print_str(diff_msg)

    	addi $t0, $t0, 1
    	
    	beq $t0, 6, lost
    	
    	print_img
    	
    	#j getChar
    	
lost:
	print_str(lostPrompt)
	j main

exit:
	print_str(exitPrompt)

    	li $v0, 10
    	syscall
